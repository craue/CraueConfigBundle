name: Tests

on:
  pull_request: ~
  push: ~

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }} @ ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: "PHP ${{ matrix.php-version }} - ${{ matrix.dependencies || format('Symfony {0}', matrix.symfony-require) }}${{ (matrix.allow-failure && ' ðŸ”•') || '' }}"
    runs-on: "ubuntu-latest"
    continue-on-error: ${{ matrix.allow-failure || false }}
    env:
      SYMFONY_REQUIRE: ${{matrix.symfony-require}}
      SYMFONY_DEPRECATIONS_HELPER: ${{matrix.symfony-deprecations}}
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.3"
          - "7.4"
          - "8.0"
          - "8.1"
          - "8.2"
        dependencies:
          - "highest"
        stability:
          - "stable"
        symfony-require:
          - ""
        symfony-deprecations:
          - "weak"
        doctrine-cache-bundle:
          - false
        include:
          -
            php-version: '7.3'
            dependencies: 'lowest'
            stability: 'stable'
            doctrine-cache-bundle: true
            symfony-deprecations: 'max[self]=2&max[indirect]=1230'
            symfony-require: "4.4.*"
          - 
            php-version: '7.3'
            symfony-require: '4.4.*'
            doctrine-cache-bundle: true
            symfony-deprecations: 'max[indirect]=4'
          -
            php-version: '7.4'
            symfony-require: '5.4.*'
          -
            php-version: '8.0'
            symfony-require: '5.4.*'
          -
            php-version: '8.1'
            symfony-require: '5.4.*'
          -
            php-version: '8.1'
            symfony-require: '6.3.*'
          -
            php-version: '8.2'
            symfony-require: '6.4.*'
            stability: 'dev'
            allow-failure: true

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: set up MySQL
      run: |
        sudo systemctl start mysql
        echo '
          CREATE DATABASE IF NOT EXISTS test;
          DROP USER IF EXISTS "tester"@"localhost";
          CREATE USER "tester"@"localhost" IDENTIFIED WITH mysql_native_password BY "";
          GRANT ALL ON test.* TO "tester"@"localhost";
          FLUSH PRIVILEGES;
        ' > /tmp/mysql-init.sql
        mysql --user=root --password=root -e 'source /tmp/mysql-init.sql'

    - name: checkout
      uses: actions/checkout@v3

    - name: setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: "${{ matrix.php-version }}"
        extensions: mysql, redis
        coverage: pcov
        ini-values: memory_limit=-1
        tools: flex
      env:
        fail-fast: true # interrupt on extension setup error

    - name: get Composer's cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: cache Composer's package cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ matrix.php }}-${{ matrix.dependencies || format('symfony-{0}', matrix.symfony-require) }}

    - name: Globally install symfony/flex
      if: matrix.symfony-require != ''
      run: |
          composer global config --no-plugins allow-plugins.symfony/flex true
          composer global require --no-progress --no-scripts --no-plugins symfony/flex

    - name: "Require doctrine/cache-bundle"
      if: "${{ matrix.doctrine-cache-bundle == true }}"
      run: "composer require --dev doctrine/doctrine-cache-bundle:^1.3.1 --no-update"

    - name: "Use dev dependencies"
      if: "${{ matrix.stability == 'dev' }}"
      run: "composer config minimum-stability dev"

    - name: "Install dependencies with Composer"
      uses: "ramsey/composer-install@v2"
      with:
        dependency-versions: "${{ matrix.dependencies }}"
        composer-options: "--prefer-dist"

    - name: run PHPUnit
      run: vendor/bin/phpunit -v --coverage-clover build/logs/clover.xml
      env:
        REDIS_DSN: redis://localhost:6379

    - name: upload code coverage data
      if: ${{ github.repository == 'craue/CraueConfigBundle' }}
      env:
        COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: |
        composer global require php-coveralls/php-coveralls
        php-coveralls --coverage_clover=build/logs/clover.xml -v
